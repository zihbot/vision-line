// tslint:disable
/**
 * Vision Line API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    Function,
    Line,
    Node,
} from '../models';

export interface ImagesLineIdGetRequest {
    lineId: number;
    lastChange?: number;
}

export interface ImagesLineIdNodeIdGetRequest {
    lineId: number;
    nodeId: number;
    lastChange?: number;
}

export interface LinesLineIdDeleteRequest {
    lineId: number;
}

export interface LinesLineIdNodesGetRequest {
    lineId: number;
}

export interface LinesLineIdNodesNodeIdDeleteRequest {
    lineId: number;
    nodeId: number;
}

export interface LinesLineIdNodesNodeIdPutRequest {
    lineId: number;
    nodeId: number;
    node: Node;
}

export interface LinesLineIdNodesPostRequest {
    lineId: number;
    node: Node;
}

export interface LinesPostRequest {
    line: Line;
}

/**
 * no description
 */
export class DefaultApi extends BaseAPI {

    /**
     * Get all possible functions
     */
    functionsGet(): Observable<Array<Function>>
    functionsGet(opts?: OperationOpts): Observable<RawAjaxResponse<Array<Function>>>
    functionsGet(opts?: OperationOpts): Observable<Array<Function> | RawAjaxResponse<Array<Function>>> {
        return this.request<Array<Function>>({
            url: '/functions',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Get image from line with lineId
     */
    imagesLineIdGet({ lineId, lastChange }: ImagesLineIdGetRequest): Observable<Blob>
    imagesLineIdGet({ lineId, lastChange }: ImagesLineIdGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Blob>>
    imagesLineIdGet({ lineId, lastChange }: ImagesLineIdGetRequest, opts?: OperationOpts): Observable<Blob | RawAjaxResponse<Blob>> {
        throwIfNullOrUndefined(lineId, 'lineId', 'imagesLineIdGet');

        const query: HttpQuery = {};

        if (lastChange != null) { query['lastChange'] = lastChange; }

        return this.request<Blob>({
            url: '/images/{lineId}'.replace('{lineId}', encodeURI(lineId)),
            method: 'GET',
            query,
            responseType: 'blob',
        }, opts?.responseOpts);
    };

    /**
     * Get image from line with lineId before node with nodeId
     */
    imagesLineIdNodeIdGet({ lineId, nodeId, lastChange }: ImagesLineIdNodeIdGetRequest): Observable<Blob>
    imagesLineIdNodeIdGet({ lineId, nodeId, lastChange }: ImagesLineIdNodeIdGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Blob>>
    imagesLineIdNodeIdGet({ lineId, nodeId, lastChange }: ImagesLineIdNodeIdGetRequest, opts?: OperationOpts): Observable<Blob | RawAjaxResponse<Blob>> {
        throwIfNullOrUndefined(lineId, 'lineId', 'imagesLineIdNodeIdGet');
        throwIfNullOrUndefined(nodeId, 'nodeId', 'imagesLineIdNodeIdGet');

        const query: HttpQuery = {};

        if (lastChange != null) { query['lastChange'] = lastChange; }

        return this.request<Blob>({
            url: '/images/{lineId}/{nodeId}'.replace('{lineId}', encodeURI(lineId)).replace('{nodeId}', encodeURI(nodeId)),
            method: 'GET',
            query,
            responseType: 'blob',
        }, opts?.responseOpts);
    };

    /**
     * Get current lines
     */
    linesGet(): Observable<Array<Line>>
    linesGet(opts?: OperationOpts): Observable<RawAjaxResponse<Array<Line>>>
    linesGet(opts?: OperationOpts): Observable<Array<Line> | RawAjaxResponse<Array<Line>>> {
        return this.request<Array<Line>>({
            url: '/lines',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Delete line
     */
    linesLineIdDelete({ lineId }: LinesLineIdDeleteRequest): Observable<Array<Line>>
    linesLineIdDelete({ lineId }: LinesLineIdDeleteRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<Line>>>
    linesLineIdDelete({ lineId }: LinesLineIdDeleteRequest, opts?: OperationOpts): Observable<Array<Line> | RawAjaxResponse<Array<Line>>> {
        throwIfNullOrUndefined(lineId, 'lineId', 'linesLineIdDelete');

        return this.request<Array<Line>>({
            url: '/lines/{lineId}'.replace('{lineId}', encodeURI(lineId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Get nodes for line
     */
    linesLineIdNodesGet({ lineId }: LinesLineIdNodesGetRequest): Observable<Array<Node>>
    linesLineIdNodesGet({ lineId }: LinesLineIdNodesGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<Node>>>
    linesLineIdNodesGet({ lineId }: LinesLineIdNodesGetRequest, opts?: OperationOpts): Observable<Array<Node> | RawAjaxResponse<Array<Node>>> {
        throwIfNullOrUndefined(lineId, 'lineId', 'linesLineIdNodesGet');

        return this.request<Array<Node>>({
            url: '/lines/{lineId}/nodes'.replace('{lineId}', encodeURI(lineId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Delete node by nodeId
     */
    linesLineIdNodesNodeIdDelete({ lineId, nodeId }: LinesLineIdNodesNodeIdDeleteRequest): Observable<Array<Node>>
    linesLineIdNodesNodeIdDelete({ lineId, nodeId }: LinesLineIdNodesNodeIdDeleteRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<Node>>>
    linesLineIdNodesNodeIdDelete({ lineId, nodeId }: LinesLineIdNodesNodeIdDeleteRequest, opts?: OperationOpts): Observable<Array<Node> | RawAjaxResponse<Array<Node>>> {
        throwIfNullOrUndefined(lineId, 'lineId', 'linesLineIdNodesNodeIdDelete');
        throwIfNullOrUndefined(nodeId, 'nodeId', 'linesLineIdNodesNodeIdDelete');

        return this.request<Array<Node>>({
            url: '/lines/{lineId}/nodes/{nodeId}'.replace('{lineId}', encodeURI(lineId)).replace('{nodeId}', encodeURI(nodeId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Change the node in nodeId position
     */
    linesLineIdNodesNodeIdPut({ lineId, nodeId, node }: LinesLineIdNodesNodeIdPutRequest): Observable<Array<Node>>
    linesLineIdNodesNodeIdPut({ lineId, nodeId, node }: LinesLineIdNodesNodeIdPutRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<Node>>>
    linesLineIdNodesNodeIdPut({ lineId, nodeId, node }: LinesLineIdNodesNodeIdPutRequest, opts?: OperationOpts): Observable<Array<Node> | RawAjaxResponse<Array<Node>>> {
        throwIfNullOrUndefined(lineId, 'lineId', 'linesLineIdNodesNodeIdPut');
        throwIfNullOrUndefined(nodeId, 'nodeId', 'linesLineIdNodesNodeIdPut');
        throwIfNullOrUndefined(node, 'node', 'linesLineIdNodesNodeIdPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<Array<Node>>({
            url: '/lines/{lineId}/nodes/{nodeId}'.replace('{lineId}', encodeURI(lineId)).replace('{nodeId}', encodeURI(nodeId)),
            method: 'PUT',
            headers,
            body: node,
        }, opts?.responseOpts);
    };

    /**
     * Add new node with position
     */
    linesLineIdNodesPost({ lineId, node }: LinesLineIdNodesPostRequest): Observable<Array<Node>>
    linesLineIdNodesPost({ lineId, node }: LinesLineIdNodesPostRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<Node>>>
    linesLineIdNodesPost({ lineId, node }: LinesLineIdNodesPostRequest, opts?: OperationOpts): Observable<Array<Node> | RawAjaxResponse<Array<Node>>> {
        throwIfNullOrUndefined(lineId, 'lineId', 'linesLineIdNodesPost');
        throwIfNullOrUndefined(node, 'node', 'linesLineIdNodesPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<Array<Node>>({
            url: '/lines/{lineId}/nodes'.replace('{lineId}', encodeURI(lineId)),
            method: 'POST',
            headers,
            body: node,
        }, opts?.responseOpts);
    };

    /**
     * Create new line
     */
    linesPost({ line }: LinesPostRequest): Observable<Line>
    linesPost({ line }: LinesPostRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Line>>
    linesPost({ line }: LinesPostRequest, opts?: OperationOpts): Observable<Line | RawAjaxResponse<Line>> {
        throwIfNullOrUndefined(line, 'line', 'linesPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<Line>({
            url: '/lines',
            method: 'POST',
            headers,
            body: line,
        }, opts?.responseOpts);
    };

}
